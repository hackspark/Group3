{"nbformat_minor": 0, "cells": [{"execution_count": 1, "cell_type": "code", "source": "get_ipython().system(u'pip install BeautifulSoup4')", "outputs": [{"output_type": "stream", "name": "stdout", "text": "Downloading/unpacking BeautifulSoup4\n  Downloading beautifulsoup4-4.4.0-py2-none-any.whl (81kB): 81kB downloaded\nInstalling collected packages: BeautifulSoup4\nSuccessfully installed BeautifulSoup4\nCleaning up...\n"}], "metadata": {"scrolled": true, "collapsed": false, "trusted": true}}, {"execution_count": 11, "cell_type": "code", "source": "\n# coding: utf-8\n\n\n\n# In[12]:\n\n\nimport urllib\nimport urllib2\nimport re\nfrom bs4 import BeautifulSoup\nimport StringIO\nimport gzip\nimport random\nimport time\nimport collections\nimport logging\nimport sys,os\nimport smtplib  \nfrom email.mime.text import MIMEText  \nimport random\nfrom datetime import datetime\nimport calendar\n#reload(sys)\n#sys.setdefaultencoding(\"utf-8\")\nlogging.basicConfig(level=logging.DEBUG, format='%(levelname)s - %(asctime)s %(message)s', datefmt='[%b %d %H:%M:%S]')\nspan=86\nuse_proxy=False\nproxyid = 0\npath=sys.path[0]\ndef getHtml(code,use_proxy=False):\n    #code = 600663\n    qstr = urllib.quote(get_fulname(\"%06d\"%code).encode(\"UTF-8\"))\n    d = datetime.utcnow()\n    ts = calendar.timegm(d.utctimetuple())\n    #print qstr\n    # data = urllib.urlencode(values)\n    if use_proxy :\n        url = u\"http://weixin.sogou.com/weixin?sourceid=inttime_day&tsn=1&type=2&query=%s&fr=sgsearch&ie=utf8&_ast=%d&_asf=null&w=%08d&cid=null\" % (qstr,ts,random.randint(0,100000000))\n        # proxyip = '121.14.138.56:81'\n        proxyip = proxypool[proxyid]\n        # proxypool = ['111.161.65.79:80','163.177.79.5:80','39.79.139.31:80','182.254.129.90:8080'\n        logging.info(\"using proxy:%s\"%proxyip)\n        headers = { 'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36',\n                'Referer':'http://weixin.sogou.com/',\n                'Cookie':'ABTEST=4|1438271704|v1; IPLOC=CN88; SUID=AB02E6676A20900A0000000055BA48D8; SUV=0086783667E602AB55BA48DAF6966090; SUID=AB02E6677310920A0000000055BA48DA; weixinIndexVisited=1; sct=1; SNUID=%s' % '5B1078CF1B1E078F734094041C63B1BC',\n                'Accept-Encoding':'gzip, deflate, sdch',\n                'Accept-Language':'zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3',\n                'Cache-Control':'max-age=0',\n                'Connection':'keep-alive',\n                'Host':'weixin.sogou.com'\n                }\n        if proxyid % 2 ==0:\n            headers['Cookie']= 'ABTEST=5|1437318971|v1; IPLOC=CN1100; SUID=470B64D32708930A0000000055ABBF3B; SUV=1438272036284458; SUID=AB02E6677310920A0000000055BA4A22; weixinIndexVisited=1; sct=1; SNUID=%s; wapsogou_qq_nickname=' % 'B51CF9791E1B031C10DEB60C1FF02365'\n        req = urllib2.Request(url,headers = headers)\n        proxy = urllib2.ProxyHandler({'http': proxyip})\n        opener = urllib2.build_opener(proxy)\n        #urllib2.install_opener(opener)\n        response = opener.open(req,timeout=10)\n    else:    \n        url = u\"http://weixin.sogou.com/weixin?sourceid=inttime_day&tsn=1&type=2&query=%s&fr=sgsearch&ie=utf8&_ast=%d&_asf=null&w=%08d&cid=null\" % (qstr,ts,random.randint(0,100000000))\n        logging.info(\"using NO proxy.\")\n        headers = { 'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:37.0) Gecko/20100101 Firefox/37.0',\n                'Referer':'http://weixin.sogou.com/',\n                'Cookie':'SUV=1209062227293584; CXID=AB4DFBC95A62C282FC5697930A8A82E0; IPLOC=CN1100; ssuid=3271513620; SUID=E4FF276A5709950A54BE423300016CE9; weixinIndexVisited=1; sct=24; ad=$UlPNyllll2q5H3flllllVqlRyllllll1LyRDyllllZlllll4llll5@@@@@@@@@@; SNUID=%s; ABTEST=7|1431385763|v1; wapsogou_qq_nickname=' % '8E8B9602DEDBC08C80B679A1DE652CCB',\n                'Accept-Encoding':'gzip, deflate',\n                'Accept-Language':'zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3',\n                'Cache-Control':'max-age=0',\n                'Connection':'keep-alive',\n                'Host':'weixin.sogou.com'\n                }\n        req = urllib2.Request(url,headers = headers)\n        response = urllib2.urlopen(req)\n    respInfo = response.info()\n    if \"Content-Encoding\" in respInfo and respInfo['Content-Encoding'] == \"gzip\":\n        #logging.info(\"using Gzip compressed.\")\n        compresseddata = response.read()\n        #print compresseddata\n        compressedstream = StringIO.StringIO(compresseddata)\n        gzipper = gzip.GzipFile(fileobj=compressedstream)\n        html = gzipper.read()\n    else:\n        #logging.info(\"using NO compression.\")\n        html = response.read()\n    #print html\n    if anti_spider(html)>0:\n        return False;\n    # return \n    soup = BeautifulSoup(html)\n    c = \"%06d\"%code\n\n    if soup.find('div', { \"class\" : \"s-p\" }):\n        t = soup.findAll('div', { \"class\" : \"s-p\" })\n        n = str(len(t))\n        if soup.find(\"resnum\"):\n            n = soup.find(\"resnum\").contents[0]\n        l= []\n        for e in t:\n            l.append(int(e['t']))\n        #print l\n        t = str(sum(l)/len(l))\n    else:\n        n = '0'\n        t = '0'\n\n    pos_reg = ur'\u5927|\u589e|\u5f3a\u52b2|\u53cd\u5f39|\u4e0a\u6da8|\u5408\u7406|\u4e70\u5165|\u7ef4\u6301|\u53cd\u8f6c|\u626d\u4e8f|\u4e00\u5b9a|\u6301\u7eed|\u6539\u5584|\u53d7\u76ca|\u6ee1\u4ed3'\n    posre = re.compile(pos_reg)\n    poslist = re.findall(posre,soup.get_text())\n    pn = len(poslist)\n\n    neg_reg = ur'\u5c0f|\u51cf|\u75b2\u8f6f|\u653e\u7f13|\u4e0b\u8dcc|\u8870\u9000|\u5356\u51fa|\u4e0b\u8c03|\u4e8f\u635f|\u4e0b\u964d|\u53ef\u80fd|\u4e2d\u6b62|\u6076\u5316|\u5f71\u54cd|\u7a7a\u4ed3'\n    negre = re.compile(neg_reg)\n    neglist = re.findall(negre,soup.get_text())\n    nn = len(neglist)\n    if (pn - nn) != 0:\n        n = str(int(n) * (pn - nn))\n\n    save_line(\"%s,%s,%s,%s,%s\"%(c,n.replace(',',''),pn,nn,t))\n    logging.info(\"saved data: %s,%s,%s,%s,%s\"%(c,n.replace(',',''),pn,nn,t))\n    return True\ndef anti_spider(html):\n    reg = r'src=\"seccode.php\\?tc=\\d+\"'\n    imgre = re.compile(reg)\n    imglist = re.findall(imgre,html)\n    # print imglist\n    return len(imglist)\n\ndef save_line(line):\n    ctime = time.strftime('%Y-%m-%d', time.gmtime(time.time()+8*3600))\n    with open('save%s.txt' % ctime, 'ab') as fp:\n        fp.write('%s\\n' % (line.strip()))\n        \ndef save_status(line):\n    # ctime = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(time.time()+8*3600))\n    with open('status.txt', 'w+') as fp:\n        fp.seek(0)\n        fp.write('%s\\n' % (line.strip()))\n        \ndef read_status():\n    # ctime = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(time.time()+8*3600))\n    \n    with open('status.txt', 'r+') as fp:\n        line= fp.readline()\n        if len(line)==0:\n            return 1;\n        return int(line)    \n    return 1;\n\nproxypool=[]\ndef read_ip():\n    # ctime = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(time.time()+8*3600))\n    with open('ip.txt', 'r+') as fp:\n        for line in fp.readlines():\n            words = line.split('\\t')\n            proxypool.append('%s:%s'%(words[0].strip(),words[1].strip()))\n    random.shuffle(proxypool)\n    \nstockinfo =u\"\"\n\ndef check_valid(stock):\n    if stockinfo.find(stock) > -1 :\n        return True\n    return False\n \ndef get_fulname(stock):\n    reg = r'(%s)'%stock\n    i = stockinfo.index(reg)\n    j = stockinfo[:i].rindex(r')')\n    return stockinfo[j+1:i]+stock\n       \n#html = \"http://weixin.sogou.com/weixin?query=600111&type=2\"\nmailto_list=['bangtech@sina.com','gaohaiyuancc@163.com','viewtech@yeah.net','michael.lidaming@gmail.com','ranwangx@gmail.com','liwenshujlu@gmail.com','qililiqq@gmail.com','liu.jfchina@gmail.com','52479395@qq.com','652601418@qq.com','WinnDiXie@foxmail.com','asmilencer@126.com','hongyao21@163.com','52808671@qq.com','75256111@qq.com','gdw99@163.com','aggie_cc@163.com','245522831@qq.com','jennadudu@126.com','extend2010@126.com','2086704695@qq.com','liujuchong@163.com','sadechai@outlook.com','74889408@163.com','16791701@qq.com','zhangyj0330@163.com','yezulong@163.com','153872268@qq.com','953755977@qq.com','dengchidengchi@126.com','yekaichen@sina.com'] \nmailto_list_dbg=['bangtech@sina.com']\nmail_host=\"smtp.sina.com\"  #\u8bbe\u7f6e\u670d\u52a1\u5668\nmail_user=\"stockpredict\"    #\u7528\u6237\u540d\nmail_pass=\"stockpredict\"   #\u53e3\u4ee4 \nmail_postfix=\"sina.com\"  #\u53d1\u4ef6\u7bb1\u7684\u540e\u7f00\ntrycount=0\nspidercount=0  \n\ndef read_email():\n    del mailto_list[:]\n    with open('email.txt', 'r+') as fp:\n        for line in fp.readlines():\n            words = line.strip().split(',')\n            for mail in words:\n                mailto_list.append(mail.strip('\\''))\n\n\n\n\ndef send_mail(account_index,to_list,sub,content):  \n    me=\"stockpredict_via_wechat_bigdata\"+\"<\"+mail_user+\"@\"+mail_postfix+\">\"  \n    msg = MIMEText(content,_subtype='html',_charset='UTF-8')   \n    msg['Subject'] = sub  \n    msg['From'] = me  \n    msg['To'] = to_list[0] \n    msg['Bcc'] = \";\".join(to_list[1:])   \n    try:  \n        server = smtplib.SMTP()  \n        server.connect(mail_host) \n        if account_index>0:\n            server.login('%s%d'%(mail_user,account_index),mail_pass) \n        else:\n            server.login(mail_user,mail_pass)  \n        server.sendmail(me, to_list, msg.as_string())  \n        server.close()  \n        return True  \n    except Exception, e:  \n        print str(e)  \n        return False  \n\n\ndef domath_sendrep(count):\n    print('info get: %d!'%count)    \n    ctime = time.strftime('%Y-%m-%d', time.gmtime(time.time()+8*3600))\n    timelst = []\n    for i in range(0,3):\n        timelst.append(time.strftime('%Y-%m-%d', time.gmtime(time.time()+8*3600-i*24*3600)))\n    cmd = 'cat'\n    for timestr in timelst:\n        cmd += ' save%s.txt'%timestr\n    cmd += '>'\n    tmp = 'save.%06d' % random.randint(0,1000000)\n    cmd += tmp\n    print(cmd)\n    os.system(cmd)\n    print('domath...')\n    os.system(\"bash ./domath.sh %s\" % tmp)\n    trycount=0\n    with open('recommend+%s+.html'%ctime, 'r+') as fp:\n        recommend= fp.readline().decode(\"UTF-8\" )\n        ctime = time.strftime('%Y-%m-%d %H:%M', time.gmtime(time.time()+8*3600))\n        read_email() \n        step=30\n        try: \n            for i in range(0,len(mailto_list)/step + 1):\n                print(recommend.encode(\"UTF-8\"))\n                #if count> 20 and send_mail(i,mailto_list[i*step:i*step+29],u\"\u80a1\u5e02\u6709\u98ce\u9669 \u6295\u8d44\u9700\u8c28\u614e:\u4e91\u4e0a\u7287\u725b\u5b9e\u65f6\u63a8\u8350%s\"%ctime,recommend.encode(\"UTF-8\")):  \n                #    logging.info('Destination:%s'%\";\".join(mailto_list[i*step:i*step+29]) )\n                logging.info('mail sent!')\n        except Exception, e:  \n            logging.exception('sendmail error: %r', e)\n\nlogging.info(path)\nread_ip()\nlogging.info(proxypool)\ncount = 0\nwith open('astock.txt', 'r+') as fp:\n    astockinfo= fp.readline().decode(\"UTF-8\" )\nwith open('sstock.txt', 'r+') as fp:\n    sstockinfo= fp.readline().decode(\"UTF-8\" )\nwith open('rstock.txt', 'r+') as fp:\n    rstockinfo= fp.readline().decode(\"UTF-8\" )\nstockinfo = astockinfo + sstockinfo + rstockinfo\n\n\ntry:\n    x = read_status()\n    if check_valid(\"%06d\"%x):\n        use_proxy = False\n        if False==getHtml(x,use_proxy):\n            spidercount+=1\n            x-=1\n            logging.info('%s met antispider, spider counter:%d!'%(x,spidercount))\n            logging.info(\"%r removed from list\",proxypool[proxyid])\n            proxypool.remove(proxypool[proxyid])\n            if spidercount > 99:\n                logging.info('%06d met antispider, game over!'%x)\n                #break;\n        #time.sleep(span)\n    else:\n        logging.info('%06d is not valid stock' %x)\nexcept Exception as e:\n    logging.exception('proxy error: %r', e)\n    if 'timed out' in str(e) or 'Connection refused' in str(e) or 'Connection reset by peer' in str(e) or 'Forbidden' in str(e) or 'Access Denied' in str(e) or 'No route to host' in str(e) or 'Bad Gateway' in str(e) or 'Not Found' in str(e) or 'Service Unavailable' in str(e) or 'BadStatusLine' in '%r' % e:\n        x-=1\n        logging.info(\"%r removed from list\",proxypool[proxyid])\n        proxypool.remove(proxypool[proxyid])\nfinally:\n    if check_valid(\"%06d\"%x):\n        proxyid+=1\n        proxyid %=30\n        if proxyid >= len(proxypool)-1:\n            proxyid = 0\n        if len(proxypool) < 5:\n            read_ip()\n            spidercount=0\n        count += 1\n        time.sleep(0.05)\n    else:\n        time.sleep(0.05)\n    x+=1\n    if x>3000 and x<159900:\n        x=159900\n\n    if x>159944 and x<300000:\n        x=300000\n\n    if x>300500 and x<510010:\n        x=510010\n\n    if x>518880 and x<600000:\n        x=600000\n\n    save_status(\"%06d\"%x)\n    if x>604000:\n        x=0\n        save_status(\"%06d\"%x)\n        #domath_sendrep(count)\n        #count=0\n        logging.info('INFO GET, JOB FINISHED')\n        # continue;\n    if count > 1000:\n        domath_sendrep(count)\n        count=0\n        logging.info('INFO GET, JOB FINISHED')\n        # continue;\n\nprint('new message got!')\n\n\n", "outputs": [{"output_type": "stream", "name": "stdout", "text": "new message got!\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 12, "cell_type": "code", "source": "!cat save2015-08-16.txt", "outputs": [{"output_type": "stream", "name": "stdout", "text": "600528,78,5,2,1439664725\r\n600529,0,0,0,0\r\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 37, "cell_type": "code", "source": "import math\nimport random\nimport string\nfrom numpy  import *\n\nrandom.seed(0)\n\n# calculate a random number where:  a <= rand < b\ndef rand(a, b):\n    return (b-a)*random.random() + a\n\n# Make a matrix (we could use NumPy to speed this up)\ndef makeMatrix(I, J, fill=0.0):\n    m = []\n    for i in range(I):\n        m.append([fill]*J)\n    return m\n\n# our sigmoid function, tanh is a little nicer than the standard 1/(1+e^-x)\n#\u4f7f\u7528\u53cc\u6b63\u5207\u51fd\u6570\u4ee3\u66fflogistic\u51fd\u6570\ndef sigmoid(x):\n    return math.tanh(x)\n\n# derivative of our sigmoid function, in terms of the output (i.e. y)\n# \u53cc\u6b63\u5207\u51fd\u6570\u7684\u5bfc\u6570\uff0c\u5728\u6c42\u53d6\u8f93\u51fa\u5c42\u548c\u9690\u85cf\u4fa7\u7684\u8bef\u5dee\u9879\u7684\u65f6\u5019\u4f1a\u7528\u5230\ndef dsigmoid(y):\n    return 1.0 - y**2\n\nclass NN:\n    def __init__(self, ni, nh, no):\n        # number of input, hidden, and output nodes\n        # \u8f93\u5165\u5c42\uff0c\u9690\u85cf\u5c42\uff0c\u8f93\u51fa\u5c42\u7684\u6570\u91cf\uff0c\u4e09\u5c42\u7f51\u7edc\n        self.ni = ni # +1 for bias node\n        self.nh = nh\n        self.no = no\n\n        # activations for nodes\n        self.ai = [1.0]*self.ni\n        self.ah = [1.0]*self.nh\n        self.ao = [1.0]*self.no\n        \n        # create weights\n        #\u751f\u6210\u6743\u91cd\u77e9\u9635\uff0c\u6bcf\u4e00\u4e2a\u8f93\u5165\u5c42\u8282\u70b9\u548c\u9690\u85cf\u5c42\u8282\u70b9\u90fd\u8fde\u63a5\n        #\u6bcf\u4e00\u4e2a\u9690\u85cf\u5c42\u8282\u70b9\u548c\u8f93\u51fa\u5c42\u8282\u70b9\u94fe\u63a5\n        #\u5927\u5c0f\uff1aself.ni*self.nh\n        self.wi = makeMatrix(self.ni, self.nh)\n        #\u5927\u5c0f\uff1aself.ni*self.nh\n        self.wo = makeMatrix(self.nh, self.no)\n        # set them to random vaules\n        #\u751f\u6210\u6743\u91cd\uff0c\u5728-0.2-0.2\u4e4b\u95f4\n        for i in range(self.ni):\n            for j in range(self.nh):\n                self.wi[i][j] = rand(-0.2, 0.2)\n        for j in range(self.nh):\n            for k in range(self.no):\n                self.wo[j][k] = rand(-2.0, 2.0)\n\n        # last change in weights for momentum \n        #?\n        self.ci = makeMatrix(self.ni, self.nh)\n        self.co = makeMatrix(self.nh, self.no)\n\n    def update(self, inputs):\n        if len(inputs) != self.ni:\n            raise ValueError('wrong number of inputs')\n\n        # input activations\n        # \u8f93\u5165\u7684\u6fc0\u6d3b\u51fd\u6570\uff0c\u5c31\u662fy=x;\n        for i in range(self.ni):\n            #self.ai[i] = sigmoid(inputs[i])\n            self.ai[i] = inputs[i]\n\n        # hidden activations\n        #\u9690\u85cf\u5c42\u7684\u6fc0\u6d3b\u51fd\u6570,\u6c42\u548c\u7136\u540e\u4f7f\u7528\u538b\u7f29\u51fd\u6570\n        for j in range(self.nh):\n            sum = 0.0\n            for i in range(self.ni):\n                #sum\u5c31\u662f\u300aml\u300b\u4e66\u4e2d\u7684net\n                sum = sum + self.ai[i] * self.wi[i][j]\n            self.ah[j] = sigmoid(sum)\n\n        # output activations\n        #\u8f93\u51fa\u7684\u6fc0\u6d3b\u51fd\u6570\n        for k in range(self.no):\n            sum = 0.0\n            for j in range(self.nh):\n                sum = sum + self.ah[j] * self.wo[j][k]\n            self.ao[k] = sigmoid(sum)\n\n        return self.ao[:]\n\n    #\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5 targets\u662f\u6837\u672c\u7684\u6b63\u786e\u7684\u8f93\u51fa\n    def backPropagate(self, targets, N, M):\n        if len(targets) != self.no:\n            raise ValueError('wrong number of target values')\n\n        # calculate error terms for output\n        #\u8ba1\u7b97\u8f93\u51fa\u5c42\u7684\u8bef\u5dee\u9879 \n        output_deltas = [0.0] * self.no\n        for k in range(self.no):\n            #\u8ba1\u7b97k-o\n            error = targets[k]-self.ao[k]\n            #\u8ba1\u7b97\u4e66\u4e2d\u516c\u5f0f4.14\n            output_deltas[k] = dsigmoid(self.ao[k]) * error\n\n        # calculate error terms for hidden\n        #\u8ba1\u7b97\u9690\u85cf\u5c42\u7684\u8bef\u5dee\u9879\uff0c\u4f7f\u7528\u300aml\u300b\u4e66\u4e2d\u7684\u516c\u5f0f4.15\n        hidden_deltas = [0.0] * self.nh\n        for j in range(self.nh):\n            error = 0.0\n            for k in range(self.no):\n                error = error + output_deltas[k]*self.wo[j][k]\n            hidden_deltas[j] = dsigmoid(self.ah[j]) * error\n\n        # update output weights\n        # \u66f4\u65b0\u8f93\u51fa\u5c42\u7684\u6743\u91cd\u53c2\u6570\n        # \u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\uff0c\u672c\u4f8b\u4f7f\u7528\u7684\u662f\u5e26\u6709\u201c\u589e\u52a0\u51b2\u91cf\u9879\u201d\u7684BPANN\n        # \u5176\u4e2d\uff0cN\u4e3a\u5b66\u4e60\u901f\u7387 M\u4e3a\u5145\u91cf\u9879\u7684\u53c2\u6570 self.co\u4e3a\u51b2\u91cf\u9879\n        # N: learning rate\n        # M: momentum factor\n        for j in range(self.nh):\n            for k in range(self.no):\n                change = output_deltas[k]*self.ah[j]\n                self.wo[j][k] = self.wo[j][k] + N*change + M*self.co[j][k]\n                self.co[j][k] = change\n                #print N*change, M*self.co[j][k]\n\n        # update input weights\n        #\u66f4\u65b0\u8f93\u5165\u9879\u7684\u6743\u91cd\u53c2\u6570\n        for i in range(self.ni):\n            for j in range(self.nh):\n                change = hidden_deltas[j]*self.ai[i]\n                self.wi[i][j] = self.wi[i][j] + N*change + M*self.ci[i][j]\n                self.ci[i][j] = change\n\n        # calculate error\n        #\u8ba1\u7b97E(w)\n        error = 0.0\n        for k in range(len(targets)):\n            error = error + 0.5*(targets[k]-self.ao[k])**2\n        return error\n\n    #\u6d4b\u8bd5\u51fd\u6570\uff0c\u7528\u4e8e\u6d4b\u8bd5\u8bad\u7ec3\u6548\u679c\n    def test(self, patterns):\n        for p in patterns:\n            print(p[0], '->', self.update(p[0]))\n\n    def weights(self):\n        print('Input weights:')\n        for i in range(self.ni):\n            print(self.wi[i])\n        print()\n        print('Output weights:')\n        for j in range(self.nh):\n            print(self.wo[j])\n\n    def train(self, patterns, iterations=1000, N=0.5, M=0.1):\n        # N: learning rate\n        # M: momentum factor\n        for i in range(iterations):\n            error = 0.0\n            for p in patterns:\n                inputs = p[0]\n                targets = p[1]\n                self.update(inputs)\n                error = error + self.backPropagate(targets, N, M)\n            if i % 100 == 0:\n                print('error %-.5f' % error)\n\n\n\n# In[97]:\n\ndata = sc.textFile(\"rawdata.txt\")\n\ndef parse(line):\n    arr=line.split(',')\n    return [[float(arr[1])/1000,float(arr[2])/1000,float(arr[3])/1000],[float(arr[4])/1000]]\n\nparsedData = data.map(parse)\n#print parsedData.take(5)\n#print (parsedData.count())\nn = NN(3, 1, 1)\nprint 'training...'\nn.train(parsedData.take(100))\nprint 'testing...'\nn.test(parsedData.take(100))\nprint 'test done'\n\n\n\n", "outputs": [{"output_type": "stream", "name": "stdout", "text": "training...\nerror 0.02438\nerror 0.00160\nerror 0.00092\nerror 0.00082\nerror 0.00082\nerror 0.00082\nerror 0.00082\nerror 0.00082\nerror 0.00082\nerror 0.00082\ntesting...\n([0.952, 0.982, 0.975], '->', [0.11465082913342031])\n([1.0, 1.01, 1.028], '->', [0.11657025067039145])\n([0.975, 1.013, 0.968], '->', [0.11540151064318566])\n([0.939, 0.977, 0.94], '->', [0.11379888270644258])\n([0.926, 0.955, 0.915], '->', [0.11274112033019809])\n([0.899, 0.923, 0.927], '->', [0.11191170533291611])\n([1.0, 0.99, 1.028], '->', [0.11621896456327341])\n([0.919, 0.935, 0.948], '->', [0.11282288578036961])\n([0.893, 0.901, 0.915], '->', [0.11112029447628223])\n([0.967, 0.99, 0.982], '->', [0.11510188659379963])\n([0.951, 0.988, 0.986], '->', [0.11493272153200906])\n([0.968, 0.969, 0.979], '->', [0.11466844628870507])\n([0.936, 0.944, 0.96], '->', [0.11344545227999096])\n([0.186, 0.188, 0.179], '->', [0.031647155391891])\n([0.92, 0.938, 0.942], '->', [0.11279116883358965])\n([0.948, 0.952, 0.938], '->', [0.11338154432272193])\n([0.183, 0.204, 0.199], '->', [0.03369414121575177])\n([1.0, 0.992, 1.036], '->', [0.11637632047203327])\n([0.294, 0.317, 0.316], '->', [0.05156277599019162])\n([0.89, 0.9, 0.903], '->', [0.1108233649214709])\n([0.925, 0.947, 0.945], '->', [0.11309709558574231])\n([0.926, 0.956, 0.91], '->', [0.11267206811313171])\n([0.166, 0.173, 0.196], '->', [0.030767525347022245])\n([0.933, 0.953, 0.949], '->', [0.11339562259041767])\n([0.146, 0.161, 0.144], '->', [0.026122324101209723])\n([0.992, 1.009, 1.036], '->', [0.11658212652671412])\n([1.0, 0.985, 1.003], '->', [0.11574183569578066])\n([0.171, 0.169, 0.208], '->', [0.03140141255661902])\n([0.158, 0.164, 0.186], '->', [0.02925797199775702])\n([0.131, 0.128, 0.117], '->', [0.02167386411772918])\n([0.364, 0.349, 0.389], '->', [0.05966744750803732])\n([1.0, 1.012, 1.027], '->', [0.11659001060395817])\n([0.979, 0.979, 1.003], '->', [0.11538064781194486])\n([0.397, 0.401, 0.414], '->', [0.06485925218910751])\n([0.913, 0.898, 0.932], '->', [0.11166314597743006])\n([0.838, 0.82, 0.869], '->', [0.10741137319436841])\n([0.852, 0.865, 0.877], '->', [0.10891442273212228])\n([0.924, 0.936, 0.959], '->', [0.11310623817207797])\n([0.161, 0.208, 0.182], '->', [0.03205627589948997])\n([0.922, 0.902, 0.947], '->', [0.11215379322161172])\n([0.915, 0.949, 0.94], '->', [0.11291515338172195])\n([1.0, 1.009, 0.995], '->', [0.11604947465695076])\n([0.923, 0.955, 0.936], '->', [0.11307484485763696])\n([0.916, 0.944, 0.893], '->', [0.11197025880251367])\n([0.923, 0.907, 0.949], '->', [0.11231026757146272])\n([0.359, 0.382, 0.389], '->', [0.061314189428410534])\n([0.88, 0.865, 0.911], '->', [0.11003653835095188])\n([0.808, 0.842, 0.808], '->', [0.10611429812694308])\n([0.918, 0.952, 0.944], '->', [0.11308803630253667])\n([0.131, 0.154, 0.124], '->', [0.02383598246962437])\n([0.951, 0.958, 0.966], '->', [0.11402246035302092])\n([0.867, 0.862, 0.893], '->', [0.10940545836298993])\n([0.683, 0.704, 0.717], '->', [0.09726721215918385])\n([0.93, 0.926, 0.954], '->', [0.11289272849029311])\n([1.0, 1.01, 1.001], '->', [0.11615972474879113])\n([0.917, 0.905, 0.914], '->', [0.11153398549032383])\n([0.565, 0.574, 0.554], '->', [0.08416561451827825])\n([0.958, 0.993, 0.972], '->', [0.11488510527143397])\n([0.225, 0.25, 0.238], '->', [0.04056780699855626])\n([0.161, 0.18, 0.188], '->', [0.03055781188529247])\n([0.943, 0.992, 0.957], '->', [0.11443111242227068])\n([0.977, 0.989, 0.985], '->', [0.11525349583350174])\n([0.926, 0.928, 0.936], '->', [0.11255675362787272])\n([0.924, 0.94, 0.922], '->', [0.11252725759221875])\n([0.944, 0.961, 0.935], '->', [0.11345800802267392])\n([0.931, 0.924, 0.943], '->', [0.11266779317585904])\n([0.218, 0.218, 0.262], '->', [0.03956586436788236])\n([0.133, 0.125, 0.165], '->', [0.024356758909698087])\n([0.935, 0.914, 0.923], '->', [0.11214864811457977])\n([0.476, 0.485, 0.499], '->', [0.07541464804273286])\n([1.0, 1.033, 1.014], '->', [0.11675906884950257])\n([0.901, 0.915, 0.939], '->', [0.11199059821436466])\n([1.0, 1.003, 1.033], '->', [0.11652357197817535])\n([0.943, 0.967, 0.973], '->', [0.11421455430085203])\n([0.926, 0.911, 0.969], '->', [0.11279660576151616])\n([0.929, 0.926, 0.96], '->', [0.11298603118760472])\n([0.142, 0.125, 0.135], '->', [0.023007866155095005])\n([0.929, 0.956, 0.955], '->', [0.11350782524242632])\n([0.889, 0.925, 0.935], '->', [0.11196262468737385])\n([0.287, 0.285, 0.267], '->', [0.04681575992518942])\n([1.0, 1.01, 0.987], '->', [0.11594349285734114])\n([1.0, 0.982, 1.025], '->', [0.11603036488902252])\n([0.128, 0.154, 0.131], '->', [0.024110894255194977])\n([0.921, 0.96, 0.917], '->', [0.11281280088363294])\n([0.937, 0.963, 0.935], '->', [0.11340602135394776])\n([1.0, 0.99, 1.011], '->', [0.11595687080344914])\n([0.934, 0.95, 0.937], '->', [0.11313738406351632])\n([0.419, 0.428, 0.433], '->', [0.06789557902332265])\n([0.173, 0.219, 0.191], '->', [0.03379463310067381])\n([0.168, 0.203, 0.189], '->', [0.03242473167859702])\n([0.199, 0.227, 0.236], '->', [0.03791647328083713])\n([0.935, 0.944, 0.96], '->', [0.11343226907521621])\n([0.937, 0.964, 0.968], '->', [0.11399437803317726])\n([0.306, 0.322, 0.306], '->', [0.051811653965258685])\n([0.928, 0.975, 0.92], '->', [0.11326730532676431])\n([0.377, 0.404, 0.381], '->', [0.06278222773481787])\n([0.987, 1.009, 0.989], '->', [0.11580335238415958])\n([0.233, 0.246, 0.27], '->', [0.042383327880098236])\n([0.268, 0.285, 0.262], '->', [0.045790539381480554])\n([0.207, 0.22, 0.204], '->', [0.03602738970416674])\ntest done\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 38, "cell_type": "code", "source": "\nfresh = sc.textFile(\"save2015-08-16.txt\")\nfreshData = fresh.map(parse)\nnews = freshData.take(1)[0][0]\npredictedPrice=n.update(news)[0]\nprint (news,'->',predictedPrice)\nprint 'prediction complete'\n\n", "outputs": [{"output_type": "stream", "name": "stdout", "text": "([0.078, 0.005, 0.002], '->', 0.004009473684029508)\nprediction complete\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 39, "cell_type": "code", "source": "!cat save2015-08-16.txt", "outputs": [{"output_type": "stream", "name": "stdout", "text": "600528,78,5,2,1439664725\r\n600529,0,0,0,0\r\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 33, "cell_type": "code", "source": "", "outputs": [{"output_type": "display_data", "data": {"image/png": "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\n11HFSqnv3XfDuFqyf+6mlVQVynul/rxlX9prCe9MQCEJdjBm/YW7mv3MjZemCTuNhvtvWEGlgsfw\nuWFClaFIlC6nh1mVhUO+773O5HsUvHGVs7HmE0w0XV1d5ObmotXKu/xee/VlrliUlfLQUKtVrFhY\nxDfvr2BpxT7cLRv4wXe/zJ7du9Mm29raWnQ6HXNXXMWb3kJOd/U3NakrMHP6UKqWwFvb/8GCS+Mh\nkDdeaSDPcCmVFXUIgkB1dbXsGDUaDXPnzh3SqzBjxgxOnZKPwen1eqxWK93d3YqfT/DRqxePOcYN\ncHGtfIdMiHsFNDIVJSNloYI89KHGc2soLJlWLutJ2X+67RyMZnyM1ZAbyT6OtXQn9VLOBkqlkHOr\nikaUezEUeq2G+9bIH+eWA/X4BiU8lubFe8UMXdLbH5836i88TwLEq2zWKpzXkaLTaLj7Kvl8tJd3\nKZf+in2lm7MqitApqN5eKEyqoRAIRwhHowgIw7qgzxbt7e2UlCjLCR/e/yZLFshnzQsqqC4R+J8v\nzuIDS1vZ9Lf/4lv/+Vne3r492clx586dVFVV8aEPfYiyuSv4zR4Xdk/cWKopsNJ08kjyvXHthK3M\nX1LK4Xc7OPiWjuKCWq6//npKS0vZs2eP4jjnzJnD8ePHFZMWq6qqUjpPDqa0tJS2tuEnrqsvVvYI\njIShQharZTwCo2GGwr67XfKelLOFSqWiLD+9LfWxFmUdjamISafluiWzxr2fS2dVU5IrH7p46/DZ\n8bJIksRbCh6dD1028mqCobht5TzZ/JSoKLL9aGPKa3qthpnlhXgCIY63dMkIcw34XQtjK3F9L7Bi\nVtWYwl6DuW3lfNnXu1w+TrTKL5iaupxUF+Umwz1dCnovFwKTaigkkpVMBu2UycJta2tTNBTcbjd+\ndwfTKnNlt/t9foxGAxq1mvkz8/jK2go+cmUvb2/8Dt/42qf4+0svcuLECVauXEldXR0fvPVWsmoX\n8YutrQTDUUx6DXnaKC0tLUC/dkKP3c9zj7VSVDiHBUuWUVNTw2WXXcbx48dxu+VXHHq9ntzcXDo7\nO2W35+Tk4HQ6FQ2JkpIS2tuHFoXRqlVcPE7J03ybfMKoVq1iYZ2yt2E8+x6vENdEkDMofAbx/Inz\niWUzKyekhFEQBK65+CLZbbtPtIx7/yOhqasXh0wSowBct2TmhHxHWZ5N8fcysBQ4QbbZyMK6MnQa\n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\nw/0AAAAASUVORK5CYII=\n", "text/plain": "<matplotlib.figure.Figure at 0x7fd65333d150>"}, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 40, "cell_type": "code", "source": "import os  \nimport math  \nimport pylab  \n\ny_values = []  \nx_values = []  \nspecific = data.filter(lambda l:'600528' in l)\ni=1\nfor line in specific.collect():\n    x_values.append(i)\n    y_values.append(line.split(',')[4])\n    i+=1\n\nfresh = sc.textFile(\"save2015-08-16.txt\")\nfreshData = fresh.map(parse)\nnews = freshData.take(1)[0][0]\npredictedPrice=n.update(news)[0]\nprint (news,'->',predictedPrice)\nprint 'prediction complete'\n\nx_values.append(i+1)\ny_values.append(predictedPrice*1000)\n\n  \npylab.plot(x_values,y_values,'r*')  \npylab.show()  ", "outputs": [{"output_type": "stream", "name": "stdout", "text": "([0.078, 0.005, 0.002], '->', 0.004009473684029508)\nprediction complete\n"}, {"output_type": "display_data", "data": {"image/png": "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\n", "text/plain": "<matplotlib.figure.Figure at 0x7fd653074e10>"}, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 41, "cell_type": "code", "source": "domath_sendrep(1000)", "outputs": [{"output_type": "stream", "name": "stdout", "text": "info get: 1000!\ncat save2015-08-16.txt save2015-08-15.txt save2015-08-14.txt>save.304137\ndomath...\n<html><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><body>\u80a1\u5e02\u6709\u98ce\u9669 \u6295\u8d44\u9700\u8c28\u614e<br/><span>\u65f6\u95f4\uff1a2015-08-16 06:49<span><br/>\u4eca\u65e5\u63a8\u8350\u4e70\u8fdb\u524d3\u80a1(\u70ed\u5ea6)<ul><li><a target=\"_blank\" href=\"http://weixin.sogou.com/weixin?query=\u4e2d\u94c1\u4e8c\u5c40600528&sourceid=inttime_day&tsn=1&fr=sgsearch&type=2\">600528</a>\u4e2d\u94c1\u4e8c\u5c40</li><li><a target=\"_blank\" href=\"http://weixin.sogou.com/weixin?query=\u5c71\u4e1c\u836f\u73bb600529&sourceid=inttime_day&tsn=1&fr=sgsearch&type=2\">600529</a>\u5c71\u4e1c\u836f\u73bb</li></ul>\u4eca\u65e5\u63a8\u8350\u4e70\u8fdb\u524d3\u80a1(\u7efc\u5408)<ul><li><a target=\"_blank\" href=\"http://weixin.sogou.com/weixin?query=\u4e2d\u94c1\u4e8c\u5c40600528&sourceid=inttime_day&tsn=1&fr=sgsearch&type=2\">600528</a>\u4e2d\u94c1\u4e8c\u5c40</li><li><a target=\"_blank\" href=\"http://weixin.sogou.com/weixin?query=\u5c71\u4e1c\u836f\u73bb600529&sourceid=inttime_day&tsn=1&fr=sgsearch&type=2\">600529</a>\u5c71\u4e1c\u836f\u73bb</li></ul><br/>\u7287\u725b\u6307\u6570\uff08\u6674\u96e8\u8868\uff09<ul><li>2015-08-16,78</li><li>2015-08-14,114406</li><li>2015-08-13,339569</li><li>2015-08-12,367029</li><li>2015-08-12,367029</li></ul><br/>\u9000\u8ba2\u8bf7\u56de\u590d\uff1a<a href=\"mailto:stockpredict@sina.com\">stockpredict@sina.com</a></body></html>\n\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": 42, "cell_type": "code", "source": "print 'Thank You!'", "outputs": [{"output_type": "stream", "name": "stdout", "text": "Thank You!\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"execution_count": null, "cell_type": "code", "source": "", "outputs": [], "metadata": {"collapsed": true, "trusted": true}}], "nbformat": 4, "metadata": {"kernelspec": {"display_name": "Python 2", "name": "python2", "language": "python"}, "language_info": {"mimetype": "text/x-python", "nbconvert_exporter": "python", "version": "2.7.6", "name": "python", "file_extension": ".py", "pygments_lexer": "ipython2", "codemirror_mode": {"version": 2, "name": "ipython"}}}}